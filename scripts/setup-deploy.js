const fs = require('fs');
const path = require('path');

console.log('üöÄ Setting up deployment environment...');
console.log('====================================\n');

// 1. Prisma„Çπ„Ç≠„Éº„Éû„ÅÆ‰øÆÊ≠£
console.log('üìÑ Step 1: Configuring Prisma schema for PostgreSQL...');
const schemaPath = path.join(__dirname, '../prisma/schema.prisma');
const productionSchemaPath = path.join(__dirname, '../prisma/schema.production.prisma');

try {
  // Êú¨Áï™Áî®„Çπ„Ç≠„Éº„Éû„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØ„Ç≥„Éî„Éº
  if (fs.existsSync(productionSchemaPath)) {
    console.log('   ‚úì Found production schema, copying...');
    const productionSchema = fs.readFileSync(productionSchemaPath, 'utf8');
    fs.writeFileSync(schemaPath, productionSchema);
    console.log('   ‚úì Production schema copied successfully');
  } else {
    // Â≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÁõ¥Êé•‰øÆÊ≠£
    console.log('   ‚ö† Production schema not found, updating provider...');
    if (fs.existsSync(schemaPath)) {
      let schema = fs.readFileSync(schemaPath, 'utf8');
      
      // SQLite„Åã„ÇâPostgreSQL„Å´Â§âÊõ¥
      if (schema.includes('provider = "sqlite"')) {
        schema = schema.replace('provider = "sqlite"', 'provider = "postgresql"');
        fs.writeFileSync(schemaPath, schema);
        console.log('   ‚úì Updated provider from sqlite to postgresql');
      } else if (schema.includes('provider = "postgresql"')) {
        console.log('   ‚úì Provider is already set to postgresql');
      } else {
        console.log('   ‚ö† Unknown provider, please check schema.prisma manually');
      }
    } else {
      console.error('   ‚úó schema.prisma not found!');
      process.exit(1);
    }
  }
} catch (error) {
  console.error('   ‚úó Error updating Prisma schema:', error.message);
  process.exit(1);
}

// 2. [...nextauth]„Éï„Ç©„É´„ÉÄ„ÅÆ‰ΩúÊàê
console.log('\nüìÅ Step 2: Setting up NextAuth.js route...');
const authDir = path.join(__dirname, '../app/api/auth');
const nextAuthDir = path.join(authDir, '[...nextauth]');

try {
  // „Éï„Ç©„É´„ÉÄ„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅÆ„Åø‰ΩúÊàê
  if (!fs.existsSync(nextAuthDir)) {
    console.log('   ‚ö† [...nextauth] directory not found, creating...');
    fs.mkdirSync(nextAuthDir, { recursive: true });
    console.log('   ‚úì Created [...nextauth] directory');
    
    // route.ts„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
    const routePath = path.join(nextAuthDir, 'route.ts');
    const routeContent = `import NextAuth from "next-auth"
import { authOptions } from "@/lib/auth"

const handler = NextAuth(authOptions)

export { handler as GET, handler as POST }
`;
    
    fs.writeFileSync(routePath, routeContent);
    console.log('   ‚úì Created route.ts file');
  } else {
    console.log('   ‚úì [...nextauth] directory already exists');
    
    // route.ts„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
    const routePath = path.join(nextAuthDir, 'route.ts');
    if (!fs.existsSync(routePath)) {
      console.log('   ‚ö† route.ts not found, creating...');
      const routeContent = `import NextAuth from "next-auth"
import { authOptions } from "@/lib/auth"

const handler = NextAuth(authOptions)

export { handler as GET, handler as POST }
`;
      fs.writeFileSync(routePath, routeContent);
      console.log('   ‚úì Created route.ts file');
    } else {
      console.log('   ‚úì route.ts file exists');
    }
  }
} catch (error) {
  console.error('   ‚úó Error setting up NextAuth.js:', error.message);
  process.exit(1);
}

// 3. ‰∏çË¶Å„Å™„Éï„Ç©„É´„ÉÄ„ÅÆÂâäÈô§Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
console.log('\nüßπ Step 3: Cleaning up...');
const nextauthDir = path.join(authDir, 'nextauth');
if (fs.existsSync(nextauthDir)) {
  try {
    fs.rmSync(nextauthDir, { recursive: true, force: true });
    console.log('   ‚úì Removed temporary nextauth directory');
  } catch (error) {
    console.log('   ‚ö† Could not remove temporary directory:', error.message);
  }
} else {
  console.log('   ‚úì No cleanup needed');
}

// 4. Áí∞Â¢ÉÂ§âÊï∞„ÅÆÁ¢∫Ë™ç
console.log('\nüîê Step 4: Verifying environment variables...');
const requiredEnvVars = ['DATABASE_URL', 'NEXTAUTH_SECRET', 'NEXTAUTH_URL'];
let envValid = true;

requiredEnvVars.forEach(envVar => {
  if (process.env[envVar]) {
    console.log(`   ‚úì ${envVar} is set`);
    if (envVar === 'DATABASE_URL' && process.env[envVar].includes('postgresql://')) {
      console.log('     ‚îî‚îÄ PostgreSQL URL detected');
    }
  } else {
    console.log(`   ‚úó ${envVar} is NOT set`);
    envValid = false;
  }
});

if (!envValid) {
  console.log('\n‚ö†Ô∏è  Warning: Some environment variables are missing.');
  console.log('   Please set them in your Render dashboard.');
}

// ÂÆå‰∫Ü
console.log('\n====================================');
console.log('‚ú® Deployment setup complete!');
console.log('====================================\n');

// „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±
if (process.env.NODE_ENV === 'production' || process.env.RENDER) {
  console.log('üìä Deployment Information:');
  console.log(`   Platform: ${process.env.RENDER ? 'Render' : 'Other'}`);
  console.log(`   Node Version: ${process.version}`);
  console.log(`   Current Directory: ${process.cwd()}`);
  console.log(`   Timestamp: ${new Date().toISOString()}`);
}